import java_cup.runtime.*;
import java.io.*;

parser code {:

    public boolean isCorrect = true;

    // Redefinition of error functions
    /* The report_error function, in this program, is called only when
       an error, not managed by the error symbol, is found.
       Indeed, when errors are recognized by the error symbol, the function
       syntax_error (disabled in this program) is called.
       This program is an example of error function redefinition: two new
       functions are developed, pSynError and pSynWarning, used to print
       syntactical errors and warning, respectively. */
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}

        // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }


    :};

action code {:

    private void pSynError(String message){
        System.err.println("SYN ERROR: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
        parser.isCorrect = false;
        parser.done_parsing();
    }
    private void pSynWarning(String message){
        System.err.println("SYN WARNING: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
        parser.isCorrect = false;
    }

:}

// Terminal tokens
terminal INT, DOUBLE, ID;
terminal PRINT, IF, WHILE, ELSE;
terminal RO, RC, BO, BC, SC, CM, SO, S;
terminal PLUS, MINUS, STAR, DIV;
terminal MIN, MAJ, MIN_EQ, EQ_MIN, MAJ_EQ, EQ_MAJ, EQ;
terminal AND, OR, NOT;
terminal INT_TYPE, DOUBLE_TYPE;


// Non terminal tokens
non terminal prog;

non terminal decl_list, decl, var_list, var;
non terminal type, array;

non terminal stmt_list, stmt, if, while, assignment, print;
non terminal exp;
non terminal if_cond, while_cond;
non terminal id;
non terminal mineq, majeq;


// Precedences and associativities
// lower precedences
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left MIN, MAJ, MIN_EQ, EQ_MIN, MAJ_EQ, EQ_MAJ, EQ;
precedence left PLUS, MINUS;
precedence left STAR, DIV;
// higher precedences


//////////////////////////////////////
// Grammar start
//////////////////////////////////////

start with prog;

prog ::= decl_list stmt_list {: if (parser.isCorrect) System.out.println("\nProgram correctly recognized\n"); :} ;


//////////////////////////////////////
// Declarations
//////////////////////////////////////

decl_list ::= decl_list decl | ;

decl ::= type var_list S | type error S {: pSynWarning("Error in declaration"); :} ;

type ::= INT_TYPE | DOUBLE_TYPE ;

var_list ::= var | var_list CM var ;

var ::= ID array ;

array ::= array SO INT SC | ;


//////////////////////////////////////
// Instructions
//////////////////////////////////////

// STATEMENT expression
stmt_list ::= stmt_list stmt
            | stmt
            | error stmt {: pSynWarning("Error in statement"); :} ;

stmt ::= if | while | assignment | print
                    | BO stmt_list BC
                    | BO stmt_list error BC {: pSynWarning("Missing ; before }"); :}
                    | BO error BC {: pSynWarning("Missing ; before }"); :}
                    | error S {: pSynWarning("Error in statement"); :} ;


// ASSIGNMENT expreassion
assignment ::= id S
            | id EQ exp
            | id EQ error S {: pSynWarning("Error in expression"); :}
            | error EQ exp S {: pSynWarning("Error in assigment"); :} ;


// PRINT expression
print ::= PRINT id S
      | PRINT error S {: pSynWarning("Error in 'print' instruction"); :} ;


// IF expression
if ::= IF if_cond stmt ELSE stmt
    | IF if_cond stmt
    | IF if_cond stmt error stmt {: pSynWarning("Error 'else' expected in 'if' instruction"); :} ;

if_cond ::= RO exp RC
        | RO error RC {: pSynWarning("Error in 'if' condition"); :}
        | error exp RC {: pSynWarning("Error '(' expected in 'if' instruciton"); :}
        | RO exp error  {: pSynWarning("Error ')' expected in 'if' instruciton"); :} ;


// WHILE expression
while ::= WHILE while_cond stmt ;

while_cond ::= RO exp RC
    | RO error RC {: pSynWarning("Error in 'while' condition"); :}
    | error exp RC {: pSynWarning("Error '(' expected in 'while' instruciton"); :}
    | RO exp error  {: pSynWarning("Error ')' expected in 'while' instruciton"); :} ;


// Expressions
exp ::=
    /* Logical expressions */
    exp AND exp
    | exp OR exp
    | NOT exp

    /* Comparison expressions */
    | exp EQ EQ exp
    | exp MIN exp
    | exp MAJ exp
    | exp mineq exp
    | exp majeq exp

    /* Arithmetic expression */
    | exp PLUS exp
    | exp MINUS exp
    | exp STAR exp
    | exp DIV exp
    | RO exp RC
    | id
    | INT
    | DOUBLE
    | MINUS INT
    | MINUS DOUBLE
    | RO error RC {: pSynWarning("Error in expression"); :} ;

mineq ::= MIN_EQ | EQ_MIN;
majeq ::= MAJ_EQ | EQ_MAJ;


// ID expression
id ::= ID | ID SO INT SC
          | ID SO ID SC
          | error SC {: pSynWarning("Error in vector"); :} ;


// END CUP PARSER
